#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('Games:server');
var http = require('http');
var WebSocketServer = require('websocket').server;
var draw = require('../modules/draw-n-guess/draw-n-guess-server.js');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Create async(!) websocket.
 */
var wsServer = new WebSocketServer({
    httpServer: server
});

function originIsAllowed(origin) {
	// put logic here to detect whether the specified origin is allowed. 
	return true;
}

/**
 * Let's catch some requests here
 */
wsServer.on('request', onRequest);

function onRequest(request) {
	if (!originIsAllowed(request.origin)) {
	// Make sure we only accept requests from an allowed origin 
		request.reject();
	    console.log((new Date()) + ' Connection from origin ' + request.origin + ' rejected.');
	    return;
	}
	    
	var connection = request.accept('echo-protocol', request.origin);
	console.log((new Date()) + ' Connection accepted.');
	
	connection.on('message', function(message) {
		if (message.type === 'utf8') {
			console.log('Received Message: ' + message.utf8Data);
	        connection.sendUTF(message.utf8Data);
	    }
	    else if (message.type === 'binary') {
	    	console.log('Received Binary Message of ' + message.binaryData.length + ' bytes');
	        draw.gameHandler(connection, message);
        }
    });
    
	connection.on('close', function(reasonCode, description) {
        console.log((new Date()) + ' Peer ' + connection.remoteAddress + ' disconnected.');
    });
            
    connection.on("error", function (err) {
		return console.error(err);
	});
    
}

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
